name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Debug - Show secrets status
        run: |
          echo "🔍 Checking which secrets are available..."
          echo "FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY != '' && '✅ Set' || '❌ Not set' }}"
          echo "FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID != '' && '✅ Set' || '❌ Not set' }}"
          echo "GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY != '' && '✅ Set' || '❌ Not set' }}"
          echo ""
          echo "📄 Original app.js Firebase config:"
          grep -A 7 "const FIREBASE_CONFIG" app.js

      - name: Create Runtime Configuration
        run: |
          # Check if we have the required Firebase secrets
          if [ -n "${{ secrets.FIREBASE_API_KEY }}" ] && [ -n "${{ secrets.FIREBASE_PROJECT_ID }}" ]; then
            echo "✅ Firebase secrets detected, creating runtime config with Firebase"
            
            # Create configuration with Firebase
            cat > config.js << 'CONFIGEOF'
          // Runtime configuration injected by GitHub Actions
          window.RUNTIME_CONFIG = {
            firebase: {
              apiKey: "${{ secrets.FIREBASE_API_KEY }}",
              authDomain: "${{ secrets.FIREBASE_AUTH_DOMAIN }}",
              databaseURL: "${{ secrets.FIREBASE_DATABASE_URL }}",
              projectId: "${{ secrets.FIREBASE_PROJECT_ID }}",
              storageBucket: "${{ secrets.FIREBASE_STORAGE_BUCKET }}",
              messagingSenderId: "${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}",
              appId: "${{ secrets.FIREBASE_APP_ID }}"
            },
            googleMapsApiKey: "${{ secrets.GOOGLE_MAPS_API_KEY }}",
            isConfigured: true
          };
          
          console.log('🔧 Runtime configuration loaded from GitHub Actions');
          if (window.RUNTIME_CONFIG.firebase.apiKey && window.RUNTIME_CONFIG.firebase.apiKey !== '') {
            console.log('✅ Firebase configured via runtime config');
          }
          if (window.RUNTIME_CONFIG.googleMapsApiKey && window.RUNTIME_CONFIG.googleMapsApiKey !== '') {
            console.log('✅ Google Maps configured via runtime config');
          }
          CONFIGEOF
          else
            echo "⚠️ Firebase secrets not found, creating fallback config"
            
            # Create fallback configuration
            cat > config.js << 'CONFIGEOF'
          // Fallback configuration - Firebase secrets not configured
          window.RUNTIME_CONFIG = {
            firebase: {
              apiKey: "",
              authDomain: "",
              databaseURL: "",
              projectId: "",
              storageBucket: "",
              messagingSenderId: "",
              appId: ""
            },
            googleMapsApiKey: "${{ secrets.GOOGLE_MAPS_API_KEY }}",
            isConfigured: false
          };
          
          console.log('⚠️ Using fallback configuration - Firebase not configured');
          CONFIGEOF
          fi
          
          echo "📄 Created config.js with content:"
          cat config.js

      - name: Debug - Show final configuration
        run: |
          echo "🔍 Final runtime configuration:"
          cat config.js
          echo ""
          echo "📄 Verifying files exist:"
          ls -la *.js *.html *.css

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4