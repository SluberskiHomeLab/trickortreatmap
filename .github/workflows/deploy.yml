name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Debug - Show secrets status
        run: |
          echo "üîç Checking which secrets are available..."
          echo "FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY != '' && '‚úÖ Set' || '‚ùå Not set' }}"
          echo "FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID != '' && '‚úÖ Set' || '‚ùå Not set' }}"
          echo "GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY != '' && '‚úÖ Set' || '‚ùå Not set' }}"
          echo ""
          echo "üìÑ Original app.js Firebase config:"
          grep -A 7 "const FIREBASE_CONFIG" app.js

      - name: Replace Firebase Configuration
        run: |
          # Replace Firebase configuration with actual secrets
          sed -i 's/PLACEHOLDER_FIREBASE_API_KEY/${{ secrets.FIREBASE_API_KEY }}/g' app.js
          sed -i 's/PLACEHOLDER_PROJECT_ID/${{ secrets.FIREBASE_PROJECT_ID }}/g' app.js
          sed -i 's/PLACEHOLDER_SENDER_ID/${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}/g' app.js
          sed -i 's/PLACEHOLDER_APP_ID/${{ secrets.FIREBASE_APP_ID }}/g' app.js
          
          # Replace the specific domain and database URL patterns
          sed -i 's|https://PLACEHOLDER_PROJECT_ID-default-rtdb.firebaseio.com|${{ secrets.FIREBASE_DATABASE_URL }}|g' app.js
          
          # Verify replacements were made
          echo "Checking Firebase config replacement..."
          grep -A 10 "const FIREBASE_CONFIG" app.js || echo "Firebase config not found"

      - name: Replace Google Maps API Key
        run: |
          # Replace Google Maps API key in app.js if it exists
          if [ -n "${{ secrets.GOOGLE_MAPS_API_KEY }}" ]; then
            sed -i 's/PLACEHOLDER_GOOGLE_MAPS_API_KEY/${{ secrets.GOOGLE_MAPS_API_KEY }}/g' app.js
            echo "‚úÖ Google Maps API key replaced"
          else
            echo "‚ö†Ô∏è GOOGLE_MAPS_API_KEY secret not set - Google Maps will be disabled"
          fi
          
          # Verify the replacement
          echo "Checking Google Maps API key replacement..."
          grep -A 2 "GOOGLE_MAPS_API_KEY" app.js || echo "Google Maps API key pattern not found"

      - name: Debug - Show final configuration
        run: |
          echo "üîç Final app.js configuration after replacements:"
          echo "Firebase Config:"
          grep -A 7 "const FIREBASE_CONFIG" app.js
          echo ""
          echo "Google Maps API Key:"
          grep -A 2 "GOOGLE_MAPS_API_KEY" app.js

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4